# .gitlab-ci.yml
# https://docs.gitlab.com/ci/quick_start/tutorial/
# DEPLOY_SERVER_IP=192.168.1.10
# DEPLOY_USERNAME=root
# REMOTE_SCRIPT_FILE=/root/ci.sh
# REMOTE_DEBUG_SCRIPT_FILE=/root/ci_debug.sh
# SSH_PRIVATE_KEY=
# TODO will be delete SSH_KNOWN_HOSTS and before_script
stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  image: node
  script:
    - echo "Triggered by any. CI_PIPELINE_SOURCE(${CI_PIPELINE_SOURCE}), CI_COMMIT_BRANCH(${CI_COMMIT_BRANCH}), CI_DEFAULT_BRANCH(${CI_DEFAULT_BRANCH}), CI_COMMIT_AUTHOR(${CI_COMMIT_AUTHOR}), CI_COMMIT_TITLE(${CI_COMMIT_TITLE}), CI_COMMIT_MESSAGE(${CI_COMMIT_MESSAGE}), CI_COMMIT_DESCRIPTION(${CI_COMMIT_DESCRIPTION}), CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ssh ${DEPLOY_USERNAME}@${DEPLOY_SERVER_IP} "sg crontab -c '${REMOTE_DEBUG_SCRIPT_FILE} build-job \"${CI_COMMIT_BRANCH}\" \"${CI_COMMIT_TITLE}\" \"${CI_COMMIT_MESSAGE}\"'"

test-job:
  stage: test
  image: node
  dependencies:
    - build-job
  script:
    - echo "Triggered by any to dev branch. CI_PIPELINE_SOURCE(${CI_PIPELINE_SOURCE}), CI_COMMIT_BRANCH(${CI_COMMIT_BRANCH}), CI_DEFAULT_BRANCH(${CI_DEFAULT_BRANCH}), CI_COMMIT_AUTHOR(${CI_COMMIT_AUTHOR}), CI_COMMIT_TITLE(${CI_COMMIT_TITLE}), CI_COMMIT_MESSAGE(${CI_COMMIT_MESSAGE}), CI_COMMIT_DESCRIPTION(${CI_COMMIT_DESCRIPTION}), CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ssh ${DEPLOY_USERNAME}@${DEPLOY_SERVER_IP} "sg crontab -c '${REMOTE_DEBUG_SCRIPT_FILE} test-job \"${CI_COMMIT_BRANCH}\" \"${CI_COMMIT_AUTHOR}\" \"${CI_COMMIT_DESCRIPTION}\"'"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 情况1：个人分支合并到dev时触发 $CI_PIPELINE_SOURCE == "merge_request_event"
merge_to_dev_job:
  stage: deploy
  dependencies:
    - build-job
    - test-job
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  script:
    - echo "Triggered by merge to dev branch. CI_PIPELINE_SOURCE:${CI_PIPELINE_SOURCE}, CI_MERGE_REQUEST_EVENT_TYPE(${CI_MERGE_REQUEST_EVENT_TYPE}), CI_MERGE_REQUEST_TARGET_BRANCH_NAME(${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}), CI_MERGE_REQUEST_TITLE(${CI_MERGE_REQUEST_TITLE}), CI_MERGE_REQUEST_DESCRIPTION(${CI_MERGE_REQUEST_DESCRIPTION})"
    - ssh ${DEPLOY_USERNAME}@${DEPLOY_SERVER_IP} "sg crontab -c '${REMOTE_SCRIPT_FILE} merge \"$CI_MERGE_REQUEST_TARGET_BRANCH_NAME\" \"$CI_MERGE_REQUEST_TITLE\" \"$CI_MERGE_REQUEST_DESCRIPTION\"'"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH

# 情况2：打新tag时触发
deploy_on_tag:
  stage: deploy
  dependencies:
    - build-job
    - test-job
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  script:
    - echo "Triggered by new tag. CI_PIPELINE_SOURCE:${CI_PIPELINE_SOURCE}, CI_COMMIT_TAG(${CI_COMMIT_TAG}), CI_COMMIT_TAG_MESSAGE(${CI_COMMIT_TAG_MESSAGE})"
    - ssh ${DEPLOY_USERNAME}@${DEPLOY_SERVER_IP} "sg crontab -c '${REMOTE_SCRIPT_FILE} tag \"${CI_COMMIT_BRANCH}\" \"${CI_COMMIT_TAG}\" \"${CI_COMMIT_TAG_MESSAGE}\"'"
  rules:
    - if: '$CI_COMMIT_TAG != null'
